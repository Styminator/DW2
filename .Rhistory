# Mac:
setwd("~tomskawski/Dropbox/Data Science/Data Wrangling/DW2")
# PC
# setwd("C:/Users/tskawski.WESTERN/Desktop/Dropbox/Data Science/Data Wrangling/DW2")
# install.packages("tidyr")
library("tidyr")
# install.packages("dplyr")
library("dplyr")
mydata <- read.table("titanic3.xls", stringsAsFactors = FALSE)
# Save the data set as a CSV file called titanic_original.csv and load it in RStudio into a data frame.
# MM: stringsasfactors = TRUE (Look this up)
mydata <- read.csv("titanic3.csv", stringsAsFactors = FALSE)
# Save the data set as a CSV file called titanic_original.csv and load it in RStudio into a data frame.
# MM: stringsasfactors = TRUE (Look this up)
# To check class of columns. s/b character; if not, convert
# MM: This was a good way to check class
sapply(mydata, class)
mydata
head(mydata)
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
head(mydata)
# The embarked column has some missing values, which are known to correspond to passengers who actually embarked at Southampton. Find the missing values and replace them with S. (Caution: Sometimes a missing value might be read into R as a blank or empty string.)
# Group to check brand names; yields 19 separate spellings of four brands.
mydata %>% group_by(embarked) %>% summarise(name = n())
head(mydata)
# The embarked column has some missing values, which are known to correspond to passengers who actually embarked at Southampton. Find the missing values and replace them with S. (Caution: Sometimes a missing value might be read into R as a blank or empty string.)
mydata %>% group_by(embarked) %>% summarise(name = n())
grep("", mydata$embarked, value = TRUE)
agrep(pattern = "", x = mydata$embarked, max.distance = 1)
grep(=="", mydata$embarked, value = TRUE)
grep(="", mydata$embarked, value = TRUE)
?grep
grep(="", mydata$embarked, value = TRUE)
grep(pattern = "", mydata$embarked, value = TRUE)
grep(pattern = "", mydata$embarked, value = TRUE, fixed = TRUE)
grep(pattern = "?", mydata$embarked, value = TRUE, fixed = TRUE)
grep(pattern = "", mydata$embarked, value = TRUE, fixed = TRUE)
grep(-v, mydata$embarked, value = TRUE, fixed = TRUE)
grep(//-v, mydata$embarked, value = TRUE, fixed = TRUE)
grep([//-v]], mydata$embarked, value = TRUE, fixed = TRUE)
grep([], mydata$embarked, value = TRUE, fixed = TRUE)
grep([""], mydata$embarked, value = TRUE, fixed = TRUE)
grep(-\w, mydata$embarked, value = TRUE, fixed = TRUE)
grep(-\\w, mydata$embarked, value = TRUE, fixed = TRUE)
grep(\\w, mydata$embarked, value = TRUE, fixed = TRUE)
grep(\w, mydata$embarked, value = TRUE, fixed = TRUE)
grep(w, mydata$embarked, value = TRUE, fixed = TRUE)
grep(s, mydata$embarked, value = TRUE, fixed = TRUE)
grep(S, mydata$embarked, value = TRUE, fixed = TRUE)
grep(S, mydata$embarked, value = TRUE)
grep("S", mydata$embarked, value = TRUE)
grep(-"S", mydata$embarked, value = TRUE)
grep("-S", mydata$embarked, value = TRUE)
grep(\w, mydata$embarked, value = TRUE)
grep(/w, mydata$embarked, value = TRUE)
grep(//w, mydata$embarked, value = TRUE)
grep(\\w, mydata$embarked, value = TRUE)
grep("\\w", mydata$embarked, value = TRUE)
grep(\"\\w", mydata$embarked, value = TRUE)
grep(-"\\w", mydata$embarked, value = TRUE)
grep("-\\w", mydata$embarked, value = TRUE)
grep("\\s", mydata$embarked, value = TRUE)
grep("\\W", mydata$embarked, value = TRUE)
grep("\\S", mydata$embarked, value = TRUE)
grep("\\N", mydata$embarked, value = TRUE)
grep("\\n", mydata$embarked, value = TRUE)
grep("\\H'", mydata$embarked, value = TRUE)
grep("\\H", mydata$embarked, value = TRUE)
grep("\\h", mydata$embarked, value = TRUE)
grep("\\v", mydata$embarked, value = TRUE)
grep("\\V", mydata$embarked, value = TRUE)
grep("\\r", mydata$embarked, value = TRUE)
grep("\\R", mydata$embarked, value = TRUE)
grep("\\b", mydata$embarked, value = TRUE)
grep("\\B", mydata$embarked, value = TRUE)
mydata$embarked
mydata$embarked = "C"
C
B
A
rm(C)
C
mydata$embarked
# no idea what this does or why it's here, but I'm leaving it.
# found this in the knitr help
knitr::opts_chunk$set(echo = TRUE)
# no idea what this does or why it's here, but I'm leaving it.
# found this in the knitr help
knitr::opts_chunk$set(echo = TRUE)
# Mac:
setwd("~tomskawski/Dropbox/Data Science/Data Wrangling/DW2")
# PC
# setwd("C:/Users/tskawski.WESTERN/Desktop/Dropbox/Data Science/Data Wrangling/DW2")
# install.packages("tidyr")
library("tidyr")
# install.packages("dplyr")
library("dplyr")
mydata <- read.csv("titanic3.csv", stringsAsFactors = FALSE)
# Save the data set as a CSV file called titanic_original.csv and load it in RStudio into a data frame.
# Check class of columns. Should not be factors.
sapply(mydata, class)
# The embarked column has some missing values, which are known to correspond to passengers who actually embarked at Southampton. Find the missing values and replace them with S. (Caution: Sometimes a missing value might be read into R as a blank or empty string.)
mydata %>% group_by(embarked) %>% summarise(name = n())
?grep
grep("", mydata$embarked)
grep(="", mydata$embarked)
grep("=", mydata$embarked)
grep(=="", mydata$embarked)
grep("", mydata$embarked)
grep("", mydata$embarked, ignore.case = TRUE)
grep("", mydata$embarked, ignore.case = FALSE)
grep("", mydata$embarked, fixed = TRUE)
grep("", mydata$embarked, fixed = FALSE)
grep("", mydata$embarked)
grep("", mydata$embarked, useBytes = TRUE)
grep("", mydata$embarked, invert = TRUE)
grep("?", mydata$embarked, invert = TRUE)
grep(".", mydata$embarked, invert = TRUE)
grep(".", mydata$embarked)
grep(".", mydata$embarked, invert = TRUE)
grep(".", mydata$embarked, invert = TRUE, value = TRUE)
grep(""., mydata$embarked)
grep(".", mydata$embarked)
grep(".", mydata$embarked, invert = TRUE, value = TRUE)
grep(".", mydata$embarked, invert = TRUE)
grep(".", mydata$embarked, invert = TRUE)
grep(-".", mydata$embarked)
grep("-.", mydata$embarked)
grep("-.", mydata$embarked, value = TRUE)
grep(-".", mydata$embarked, value = TRUE)
grep([:blank:], mydata$embarked)
grep([:space:], mydata$embarked)
grep(:space:, mydata$embarked)
grep(:blank:, mydata$embarked)
mydata <- read.csv("titanic3.csv", stringsAsFactors = FALSE, na.strings = "S")
# Check class of columns. Should not be factors.
sapply(mydata, class)
# The embarked column has some missing values, which are known to correspond to passengers who actually embarked at Southampton. Find the missing values and replace them with S. (Caution: Sometimes a missing value might be read into R as a blank or empty string.)
mydata %>% group_by(embarked) %>% summarise(name = n())
# Mac:
setwd("~tomskawski/Dropbox/Data Science/Data Wrangling/DW2")
# PC
# setwd("C:/Users/tskawski.WESTERN/Desktop/Dropbox/Data Science/Data Wrangling/DW2")
# install.packages("tidyr")
library("tidyr")
# install.packages("dplyr")
library("dplyr")
grep(which(test==''))
grep(which(test==''), mydata$embarked)
grep(=='', mydata$embarked)
grep("NA", mydata$embarked)
grep("S", mydata$embarked)
grep("S", mydata$embarked)
grep("S", mydata$embarked, value = TRUE)
grep("^$")
grep("^$", mydata$embarked)
(gsub("^$", "beer", mydata$embarked))
rm(mydata)
mydata <- read.csv("titanic3.csv", stringsAsFactors = FALSE)
# Save the data set as a CSV file called titanic_original.csv and load it in RStudio into a data frame.
grep("^$", mydata$embarked)
# (gsub("^$", "beer", mydata$embarked))
# grep("^$", mydata$embarked)
(gsub("^$", "beer", mydata$embarked))
mydata <- read.csv("titanic3.csv", stringsAsFactors = FALSE)
# Save the data set as a CSV file called titanic_original.csv and load it in RStudio into a data frame.
# Check class of columns. Should not be factors.
sapply(mydata, class)
# The embarked column has some missing values, which are known to correspond to passengers who actually embarked at Southampton. Find the missing values and replace them with S. (Caution: Sometimes a missing value might be read into R as a blank or empty string.)
mydata %>% group_by(embarked) %>% summarise(name = n())
# REGEX hunting yet again
grep("^$", mydata$embarked)
gsub("^$", "S", mydata$embarked)
# The embarked column has some missing values, which are known to correspond to passengers who actually embarked at Southampton. Find the missing values and replace them with S. (Caution: Sometimes a missing value might be read into R as a blank or empty string.)
mydata %>% group_by(embarked) %>% summarise(name = n())
# REGEX hunting yet again
grep("^$", mydata$embarked)
gsub("^$", "S", mydata$embarked)
# REGEX hunting yet again
grep("^$", mydata$embarked)
mydata <- gsub("^$", "S", mydata$embarked)
# The embarked column has some missing values, which are known to correspond to passengers who actually embarked at Southampton. Find the missing values and replace them with S. (Caution: Sometimes a missing value might be read into R as a blank or empty string.)
mydata %>% group_by(embarked) %>% summarise(name = n())
mydata$embarked
# Check class of columns. Should not be factors.
sapply(mydata, class)
mydata <- read.csv("titanic3.csv", stringsAsFactors = FALSE)
# Save the data set as a CSV file called titanic_original.csv and load it in RStudio into a data frame.
# Check class of columns. Should not be factors.
sapply(mydata, class)
# The embarked column has some missing values, which are known to correspond to passengers who actually embarked at Southampton. Find the missing values and replace them with S. (Caution: Sometimes a missing value might be read into R as a blank or empty string.)
mydata %>% group_by(embarked) %>% summarise(name = n())
# REGEX hunting yet again
grep("^$", mydata$embarked)
mydata$embarked <- gsub("^$", "S", mydata$embarked)
# The embarked column has some missing values, which are known to correspond to passengers who actually embarked at Southampton. Find the missing values and replace them with S. (Caution: Sometimes a missing value might be read into R as a blank or empty string.)
mydata %>% group_by(embarked) %>% summarise(name = n())
# Youâ€™ll notice that a lot of the values in the Age column are missing. While there are many ways to fill these missing values, using the mean or median of the rest of the values is quite common in such cases.
# Calculate the mean of the Age column and use that value to populate the missing values
# Think about other ways you could have populated the missing values in the age column. Why would you pick any of those over the mean (or not)?
mydata %>% group_by(age) %>% summarise(name = n())
mydata$age
mean(mydata$age)
mean(mydata$age)
?mean
mean(mydata$age, na.rm = TRUE)
grep(mydata$age)
grep("^$", mydata$age)
grep("NA", mydata$age)
grep("^$", mydata$age, value = TRUE)
grep("NA", mydata$age, value = TRUE)
grep("NA", mydata$age, NA)
?NA
grep(is.na(mydata$age), mydata$age, NA)
grep(is.na(mydata$age), mydata$age)
is.na(mydata$age)
count(is.na(mydata$age))
count(is.na(mydata$age), value = TRUE)
is.na(mydata$age)
mean(mydata$age, na.rm = TRUE)
is.na(mydata$age) <- mean(mydata$age, na.rm = TRUE)
mean(mydata$age, na.rm = TRUE)
mean(mydata$age, na.rm = TRUE)
is.na(mydata$age)
mean(mydata$age, na.rm = TRUE)
is.na(mydata$age) <- mean(mydata$age, na.rm = TRUE)
mean(mydata$age, na.rm = TRUE)
is.na(mydata$age)
is.na(mydata$age)
mean(mydata$age, na.rm = TRUE)
mean(mydata$age)
anyNA(mydata$age)
mean(mydata$age, na.rm = TRUE)
mean(mydata$age)
d1[] <- lapply(d1, function(x) {
x[is.na(x)] <- mean(x, na.rm = TRUE)
x
})
d1
mydata[] <- lapply(mydata, function(x) {
x[is.na(x)] <- mean(x, na.rm = TRUE)
x
})
mydata
mydata$age[] <- lapply(mydata$age, function(x) {
x[is.na(x)] <- mean(x, na.rm = TRUE)
x
})
mydata$age
rm(mydata)
mydata <- read.csv("titanic3.csv", stringsAsFactors = FALSE)
# Save the data set as a CSV file called titanic_original.csv and load it in RStudio into a data frame.
mydata$embarked <- gsub("^$", "S", mydata$embarked)
# Re-check
mydata %>% group_by(embarked) %>% summarise(name = n())
mydata %>% group_by(age) %>% summarise(name = n())
# Youâ€™ll notice that a lot of the values in the Age column are missing. While there are many ways to fill these missing values, using the mean or median of the rest of the values is quite common in such cases.
# Calculate the mean of the Age column and use that value to populate the missing values
# Think about other ways you could have populated the missing values in the age column. Why would you pick any of those over the mean (or not)?
# mydata %>% group_by(age) %>% summarise(name = n())
# is.na(mydata$age) <- mean(mydata$age, na.rm = TRUE)
mydata$age[] <- lapply(mydata$age, function(x) {
x[is.na(x)] <- mean(x, na.rm = TRUE)
x
})
# mydata$age
mydata %>% group_by(age) %>% summarise(name = n())
# Re-check
mydata %>% group_by(embarked) %>% summarise(name = n())
# Re-check
mydata %>% group_by(age) %>% summarise(name = n())
rm(mydata)
mydata <- read.csv("titanic3.csv", stringsAsFactors = FALSE)
# Save the data set as a CSV file called titanic_original.csv and load it in RStudio into a data frame.
mydata$embarked <- gsub("^$", "S", mydata$embarked)
mean(mydata$age, na.rm = TRUE)
mydata$age[is.na(mydata$age)]
mydata$age[is.na(mydata$age)] <- mean(mydata$age, na.rm = TRUE)
mydata$age[is.na(mydata$age)]
mean(mydata$age, na.rm = TRUE)
mydata$age
mydata %>% group_by(age) %>% summarise(name = n())
is.na(mydata$age)
# Youâ€™ll notice that a lot of the values in the Age column are missing. While there are many ways to fill these missing values, using the mean or median of the rest of the values is quite common in such cases.
# Calculate the mean of the Age column and use that value to populate the missing values
# Think about other ways you could have populated the missing values in the age column. Why would you pick any of those over the mean (or not)?
mydata %>% group_by(age) %>% summarise(name = n())
# Found this [here] (https://stackoverflow.com/questions/25835643/replacing-missing-values-in-r-with-column-mean)
mydata$age[is.na(mydata$age)] <- mean(mydata$age, na.rm = TRUE)
mydata$age
mydata %>% group_by(mydata$age)
mydata %>% group_by(age)
mydata %>% group_by(age) %>% summarise(name = n())
mydata$boat
mydata$boat["^$"]
grep("^$", mydata$boat)
(gsub("^$", "None", mydata$boat))
mydata$cabin
mydata$cabin[is.na(mydata$cabin)]
mydata$cabin[is.na(mydata)]
mydata$cabin
as.numeric(mydata$cabin <> "^$")
as.numeric(mydata$cabin != "^$")
as.numeric(mydata$cabin = "^$")
as.numeric(mydata$cabin == "^$")
mydata$has_cabin_number <- as.numeric(mydata$cabin == "^$")
mydata %>% group_by(has_cabin_number) %>% summarise(name = n())
rm(mydata)
# no idea what this does or why it's here, but I'm leaving it.
# found this in the knitr help
knitr::opts_chunk$set(echo = TRUE)
# Mac:
setwd("~tomskawski/Dropbox/Data Science/Data Wrangling/DW2")
# PC
# setwd("C:/Users/tskawski.WESTERN/Desktop/Dropbox/Data Science/Data Wrangling/DW2")
# install.packages("tidyr")
library("tidyr")
# install.packages("dplyr")
library("dplyr")
mydata <- read.csv("titanic3.csv", stringsAsFactors = FALSE)
# REGEX hunting yet again
grep("^$", mydata$embarked)
mydata$embarked <- gsub("^$", "S", mydata$embarked)
# Re-check
mydata %>% group_by(embarked) %>% summarise(name = n())
# tried to check by age, but too many fields (how would I parse more?)
mydata %>% group_by(age) %>% summarise(name = n())
mydata$age[is.na(mydata$age)] <- mean(mydata$age, na.rm = TRUE)
# mydata$age will show all the data
mydata$boat <- gsub("^$", "None", mydata$boat)
as.numeric(mydata$cabin == "^$")
as.numeric(mydata$cabin == ".")
as.numeric(mydata$cabin == ".+")
as.numeric(mydata$cabin == "+")
as.numeric(mydata$cabin == "w")
as.numeric(mydata$cabin == "b")
as.numeric(mydata$cabin == ".")
as.numeric(mydata$cabin == "//b")
as.numeric(mydata$cabin == "//B")
as.numeric(mydata$cabin == //B)
as.numeric(mydata$cabin == //b)
as.numeric(mydata$cabin == //w)
as.numeric(mydata$cabin == //.)
as.numeric(mydata$cabin == "//.")
grep(".", mydata$cabin)
grep(!=".", mydata$cabin)
grep(!= ".", mydata$cabin)
grep("!=.", mydata$cabin)
grep(".", mydata$cabin)
grep(".*", mydata$cabin)
grep(".+", mydata$cabin)
grep(".+", mydata$cabin, value value = TRUE)
grep(".+", mydata$cabin, value = TRUE)
as.numeric(".+", mydata$cabin)
grep(".+", mydata$cabin, value = TRUE)
as.numeric(".+", mydata$cabin)
as.numeric(mydata$cabin == ".+")
as.numeric(mydata$cabin = ".+")
as.numeric(mydata$cabin == ".+")
grep(".+", mydata$cabin, value = TRUE)
as.integer(mydata$cabin == ".+")
grep(".+", mydata$cabin, value = TRUE)
grep(".+", mydata$cabin)
as.integer(mydata$cabin == ".+")
as.integer(mydata$cabin == ".*")
?as.integer
as.integer(mydata$cabin)
grep(".+", mydata$cabin)
grep(".+", mydata$cabin, value = TRUE)
as.integer(mydata$cabin != ".+")
as.integer(mydata$cabin != ".")
as.integer(mydata$cabin != "*")
as.integer(mydata$cabin != *)
as.integer(mydata$cabin != "?")
as.integer(mydata$cabin == "?")
as.integer(mydata$cabin == "?+")
as.integer(mydata$cabin == "?*")
as.integer(mydata$cabin == "*")
as.integer(mydata$cabin == ".")
as.integer(mydata$cabin == "??")
as.integer(mydata$cabin == "???")
as.integer(mydata$cabin == "*")
as.integer(mydata$cabin == ".")
as.integer(mydata$cabin == "...")
as.integer(mydata$cabin == "\w")
as.integer(mydata$cabin == "\\w")
as.integer(mydata$cabin == "\\w+")
as.integer(mydata$cabin == "\\S")
as.integer(mydata$cabin == "\\-S")
as.integer(mydata$cabin == "\\S")
as.integer(mydata$cabin != "\\S")
as.integer(mydata$cabin != "\\s")
as.integer(mydata$cabin != "\\w")
as.integer(mydata$cabin != "\\b")
as.integer(mydata$cabin != "\\B")
as.integer(mydata$cabin != "\B")
as.integer(mydata$cabin != "^B")
as.integer(mydata$cabin != "^.")
as.integer(mydata$cabin != "^..")
as.integer(mydata$cabin != "^...")
as.integer(mydata$cabin != "^....")
as.integer(mydata$cabin == "^....")
as.integer(mydata$cabin == "^...")
as.integer(mydata$cabin == "^..")
as.integer(mydata$cabin == "^.")
as.integer(mydata$cabin == "^")
as.integer(mydata$cabin == "")
as.integer(mydata$cabin != "")
as.integer(mydata$cabin != "")
mydata %>% group_by(cabin) %>% summarise(name = n())
grep(!= "", mydata$cabin)
as.integer(mydata$cabin != "")
mydata$has_cabin_number <- as.integer(mydata$cabin != "")
# mydata %>% group_by(has_cabin_number) %>% summarise(name = n())
# mydata <- unite(mydata, full_address, address:country, sep = ",")
# not sure if this should be a new, combined column, or an additional column
# MM: (keeps original three fields, which I did not do)
#df <- mutate(df, full.address = paste(df$address, df$city, df$country, sep = ","))
mydata$cabin
mydata$has_cabin_number
grep(!= "", mydata$cabin)
grep(".+", mydata$cabin, value = TRUE)
grep(".+", mydata$embarked)
mydata$boat
